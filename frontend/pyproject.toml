[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "voxels-frontend"
version = "1.0.0"
description = "3D Model Viewer and Texture Generation Frontend for HPE Voxels"
authors = [
    {name = "HPE Voxels Team", email = "team@hpe-voxels.com"}
]
readme = "README.md"
requires-python = ">=3.8.1"
license = {text = "MIT"}
keywords = ["streamlit", "3d-viewer", "texture-generation", "medical-imaging", "model-viewer"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
    "Topic :: Scientific/Engineering :: Visualization",
]

dependencies = [
    # Web framework
    "streamlit>=1.28.0,<2.0.0",
    
    # 3D model processing
    "trimesh>=3.23.0,<4.0.0",
    
    # Image processing
    "Pillow>=9.5.0,<11.0.0",
    "numpy>=1.24.0,<2.0.0",
    
    # HTTP client for Flux server communication
    "requests>=2.31.0,<3.0.0",
    
    # Environment management
    "python-dotenv>=1.0.0,<2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
]

[project.urls]
Homepage = "https://github.com/hpe-voxels/voxels-frontend"
Documentation = "https://github.com/hpe-voxels/voxels-frontend#readme"
Repository = "https://github.com/hpe-voxels/voxels-frontend"
Issues = "https://github.com/hpe-voxels/voxels-frontend/issues"

[project.scripts]
model-viewer = "model_viewer:main"
texture-generator = "obj_texture_generator:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "trimesh.*",
    "PIL.*",
    "numpy.*",
    "scipy.*",
    "skimage.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
